import Mathlib.MeasureTheory.Integral.MeanInequalities
import Mathlib.MeasureTheory.Function.L1Space
import Mathlib.Analysis.NormedSpace.Dual
import Mathlib.Analysis.NormedSpace.LinearIsometry
import Mathlib.MeasureTheory.Integral.Bochner

/-! We show that the dual space of `L^p` for `1 ‚â§ p < ‚àû`.

See [Stein-Shakarchi, Functional Analysis, section 1.4] -/
noncomputable section

open Real NNReal ENNReal NormedSpace MeasureTheory

section

variable {Œ± ùïú E E‚ÇÅ E‚ÇÇ E‚ÇÉ : Type*} {m : MeasurableSpace Œ±} {p p' q q' : ‚Ñù‚â•0‚àû}
  {Œº : Measure Œ±} [NontriviallyNormedField ùïú]
  [NormedAddCommGroup E] [NormedSpace ùïú E] [FiniteDimensional ùïú E]
  [NormedAddCommGroup E‚ÇÅ] [NormedSpace ùïú E‚ÇÅ] [FiniteDimensional ùïú E‚ÇÅ]
  [NormedAddCommGroup E‚ÇÇ] [NormedSpace ùïú E‚ÇÇ] [FiniteDimensional ùïú E‚ÇÇ]
  [NormedAddCommGroup E‚ÇÉ] [NormedSpace ùïú E‚ÇÉ] [FiniteDimensional ùïú E‚ÇÉ]
  [MeasurableSpace E] [BorelSpace E]
  [MeasurableSpace E‚ÇÅ] [BorelSpace E‚ÇÅ]
  [MeasurableSpace E‚ÇÇ] [BorelSpace E‚ÇÇ]
  [MeasurableSpace E‚ÇÉ] [BorelSpace E‚ÇÉ]
  (L : E‚ÇÅ ‚ÜíL[ùïú] E‚ÇÇ ‚ÜíL[ùïú] E‚ÇÉ)

namespace ENNReal

/-- Two numbers `p, q : ‚Ñù‚â•0‚àû` are conjugate if `p‚Åª¬π + q‚Åª¬π = 1`.
This does allow for the case where one of them is `‚àû` and the other one is `1`,
in contrast to `NNReal.IsConjExponent`. -/
@[mk_iff]
structure IsConjExponent (p q : ‚Ñù‚â•0‚àû) : Prop where
  inv_add_inv_conj : p‚Åª¬π + q‚Åª¬π = 1

namespace IsConjExponent

lemma symm (hpq : p.IsConjExponent q) : q.IsConjExponent p := by
    rw [isConjExponent_iff, add_comm, hpq.inv_add_inv_conj]

lemma one_le_left (hpq : p.IsConjExponent q) : 1 ‚â§ p := by
  simp_rw [‚Üê ENNReal.inv_le_one, ‚Üê hpq.inv_add_inv_conj, self_le_add_right]

lemma one_le_right (hpq : p.IsConjExponent q) : 1 ‚â§ q := hpq.symm.one_le_left

lemma left_ne_zero (hpq : p.IsConjExponent q) : p ‚â† 0 :=
  zero_lt_one.trans_le hpq.one_le_left |>.ne'

lemma right_ne_zero (hpq : p.IsConjExponent q) : q ‚â† 0 :=
  hpq.symm.left_ne_zero

lemma left_inv_ne_top (hpq : p.IsConjExponent q) : p‚Åª¬π ‚â† ‚àû := by
  simp_rw [inv_ne_top]
  exact hpq.left_ne_zero

lemma right_inv_ne_top (hpq : p.IsConjExponent q) : q‚Åª¬π ‚â† ‚àû := hpq.symm.left_inv_ne_top

lemma left_eq (hpq : p.IsConjExponent q) : p = (1 - q‚Åª¬π)‚Åª¬π := by
  simp_rw [‚Üê inv_eq_iff_eq_inv]
  exact (ENNReal.cancel_of_ne hpq.right_inv_ne_top).eq_tsub_of_add_eq hpq.inv_add_inv_conj

lemma right_eq (hpq : p.IsConjExponent q) : q = (1 - p‚Åª¬π)‚Åª¬π := hpq.symm.left_eq

lemma inj_right (hpq : p.IsConjExponent q) (hpq' : p.IsConjExponent q') : q = q' := by
  rw [hpq.right_eq, hpq'.right_eq]

lemma inj_left (hpq : p.IsConjExponent q) (hpq' : p'.IsConjExponent q) : p = p' :=
  hpq.symm.inj_right hpq'.symm

lemma left_eq_left_iff_right_eq_right (hpq : p.IsConjExponent q) (hpq' : p'.IsConjExponent q') :
    p = p' ‚Üî q = q' := by
  constructor <;> rintro rfl <;> [apply inj_right; apply inj_left] <;> assumption

lemma one_top : (1 : ‚Ñù‚â•0‚àû).IsConjExponent ‚àû := ‚ü®by simp‚ü©

lemma top_one : (‚àû : ‚Ñù‚â•0‚àû).IsConjExponent 1 := ‚ü®by simp‚ü©

lemma left_eq_one_iff (hpq : p.IsConjExponent q) : p = 1 ‚Üî q = ‚àû :=
  hpq.left_eq_left_iff_right_eq_right .one_top

lemma left_eq_top_iff (hpq : p.IsConjExponent q) : p = ‚àû ‚Üî q = 1 :=
  (left_eq_one_iff hpq.symm).symm

lemma one_lt_left_iff (hpq : p.IsConjExponent q) : 1 < p ‚Üî q ‚â† ‚àû := by
  rw [‚Üê not_iff_not, not_lt, ne_eq, not_not, hpq.one_le_left.le_iff_eq, hpq.left_eq_one_iff]

lemma left_ne_top_iff (hpq : p.IsConjExponent q) : p ‚â† ‚àû ‚Üî 1 < q :=
  (one_lt_left_iff hpq.symm).symm

lemma _root_.NNReal.IsConjExponent.coe_ennreal {p q : ‚Ñù‚â•0} (hpq : p.IsConjExponent q) :
    (p : ‚Ñù‚â•0‚àû).IsConjExponent q where
  inv_add_inv_conj := by
    have := hpq.symm.ne_zero
    have := hpq.ne_zero
    rw_mod_cast [hpq.inv_add_inv_conj]

lemma toNNReal {p q : ‚Ñù‚â•0‚àû} (hp : p ‚â† ‚àû) (hq : q ‚â† ‚àû) (hpq : p.IsConjExponent q) :
    p.toNNReal.IsConjExponent q.toNNReal where
  one_lt := by
    rwa [‚Üê coe_lt_coe, coe_toNNReal hp, coe_one, hpq.one_lt_left_iff]
  inv_add_inv_conj := by
    rw [‚Üê coe_inj, coe_add, coe_inv, coe_inv, coe_one, coe_toNNReal hp, coe_toNNReal hq,
      hpq.inv_add_inv_conj]
    ¬∑ exact (toNNReal_ne_zero).mpr ‚ü®hpq.right_ne_zero, hq‚ü©
    ¬∑ exact (toNNReal_ne_zero).mpr ‚ü®hpq.left_ne_zero, hp‚ü©

lemma induction
    (P : (p q : ‚Ñù‚â•0‚àû) ‚Üí (p.IsConjExponent q) ‚Üí Prop)
    (nnreal : ‚àÄ ‚¶Ép q : ‚Ñù‚â•0‚¶Ñ, (h : p.IsConjExponent q) ‚Üí P p q h.coe_ennreal)
    (one : P 1 ‚àû one_top) (infty : P ‚àû 1 top_one) {p q : ‚Ñù‚â•0‚àû} (h : p.IsConjExponent q) :
    P p q h := by
  by_cases hq : q = ‚àû
  ¬∑ simp_rw [h.left_eq_one_iff.mpr hq, hq, one]
  by_cases hp : p = ‚àû
  ¬∑ simp_rw [hp, h.left_eq_top_iff.mp hp, infty]
  have := nnreal <| h.toNNReal hp hq
  simp_rw [ENNReal.coe_toNNReal hp, ENNReal.coe_toNNReal hq] at this
  exact this

lemma induction_symm
    (P : (p q : ‚Ñù‚â•0‚àû) ‚Üí (p.IsConjExponent q) ‚Üí Prop)
    (nnreal : ‚àÄ ‚¶Ép q : ‚Ñù‚â•0‚¶Ñ, (h : p.IsConjExponent q) ‚Üí p ‚â§ q ‚Üí P p q h.coe_ennreal)
    (one : P 1 ‚àû one_top)
    (symm : ‚àÄ ‚¶Ép q : ‚Ñù‚â•0‚àû‚¶Ñ, (h : p.IsConjExponent q) ‚Üí P p q h ‚Üí P q p h.symm)
    {p q : ‚Ñù‚â•0‚àû} (h : p.IsConjExponent q) : P p q h := by
  induction h using IsConjExponent.induction
  case nnreal p q h =>
    rcases le_total p q with hpq|hqp
    ¬∑ exact nnreal h hpq
    ¬∑ exact symm h.coe_ennreal.symm (nnreal h.symm hqp)
  case one => exact one
  case infty => exact symm .one_top one

/- Versions of H√∂lder's inequality.
Note that the hard case already exists as `ENNReal.lintegral_mul_le_Lp_mul_Lq`. -/

lemma _root_.ContinuousLinearMap.le_opNNNorm‚ÇÇ (L : E‚ÇÅ ‚ÜíL[ùïú] E‚ÇÇ ‚ÜíL[ùïú] E‚ÇÉ) (x : E‚ÇÅ) (y : E‚ÇÇ) :
    ‚ÄñL x y‚Äñ‚Çä ‚â§ ‚ÄñL‚Äñ‚Çä * ‚Äñx‚Äñ‚Çä * ‚Äñy‚Äñ‚Çä := L.le_opNorm‚ÇÇ x y

lemma lintegral_mul_le_one_top (Œº : Measure Œ±) {f : Œ± ‚Üí E‚ÇÅ} {g : Œ± ‚Üí E‚ÇÇ}
    (hf : AEMeasurable f Œº) : ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº ‚â§ snorm f 1 Œº * snorm g ‚ä§ Œº := by
    calc ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº ‚â§ ‚à´‚Åª (a : Œ±), ‚Äñf a‚Äñ‚Çä * snormEssSup g Œº ‚àÇŒº := MeasureTheory.lintegral_mono_ae (h := by
        rw [Filter.eventually_iff, ‚Üê Filter.exists_mem_subset_iff]
        use {a | ‚Üë‚Äñg a‚Äñ‚Çä ‚â§ snormEssSup g Œº}
        rw [‚Üê Filter.eventually_iff]
        exact ‚ü®ae_le_snormEssSup, by simp; intro _ ha; apply ENNReal.mul_left_mono ha‚ü©)
    _ = snorm f 1 Œº * snorm g ‚ä§ Œº := by
      rw [lintegral_mul_const'' _ hf.ennnorm]
      simp [snorm, snorm']

theorem lintegral_mul_le (hpq : p.IsConjExponent q) (Œº : Measure Œ±) {f : Œ± ‚Üí E‚ÇÅ} {g : Œ± ‚Üí E‚ÇÇ}
    (hf : AEMeasurable f Œº) (hg : AEMeasurable g Œº) :
    ‚à´‚Åª a, ‚ÄñL (f a) (g a)‚Äñ‚Çä ‚àÇŒº ‚â§ ‚ÄñL‚Äñ‚Çä * snorm f p Œº * snorm g q Œº := by
  calc ‚à´‚Åª a, ‚ÄñL (f a) (g a)‚Äñ‚Çä ‚àÇŒº ‚â§ ‚à´‚Åª a, ‚ÄñL‚Äñ‚Çä * (‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä) ‚àÇŒº := by
        simp_rw [‚Üê mul_assoc]; exact lintegral_mono_nnreal fun a ‚Ü¶ L.le_opNNNorm‚ÇÇ (f a) (g a)
    _ = ‚ÄñL‚Äñ‚Çä * ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº := lintegral_const_mul' _ _ coe_ne_top
    _ ‚â§ ‚ÄñL‚Äñ‚Çä * (snorm f p Œº * snorm g q Œº) := ?_
    _ = ‚ÄñL‚Äñ‚Çä * snorm f p Œº * snorm g q Œº := by rw [mul_assoc]
  gcongr
  induction hpq using IsConjExponent.induction
  case nnreal p q hpq =>
    calc
      ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº = ‚à´‚Åª a, ((‚Äñf ¬∑‚Äñ‚Çä) * (‚Äñg ¬∑‚Äñ‚Çä)) a ‚àÇŒº := by
        apply lintegral_congr
        simp only [Pi.mul_apply, coe_mul, implies_true]
      _ ‚â§ snorm f p Œº * snorm g q Œº := by
        simp only [coe_mul, snorm, coe_eq_zero, coe_ne_top, ‚ÜìreduceIte, coe_toReal, mul_ite, mul_zero, ite_mul, zero_mul, hpq.ne_zero, hpq.symm.ne_zero, snorm']
        apply ENNReal.lintegral_mul_le_Lp_mul_Lq _ (NNReal.isConjExponent_coe.mpr hpq)
        . apply hf.ennnorm
        . apply hg.ennnorm
  case one => exact lintegral_mul_le_one_top _ hf
  case infty =>
    calc
      ‚à´‚Åª a, ‚Äñf a‚Äñ‚Çä * ‚Äñg a‚Äñ‚Çä ‚àÇŒº = ‚à´‚Åª a, ‚Äñg a‚Äñ‚Çä * ‚Äñf a‚Äñ‚Çä ‚àÇŒº := by simp_rw [mul_comm]
    _ ‚â§ snorm f ‚ä§ Œº * snorm g 1 Œº := by rw [mul_comm]; exact lintegral_mul_le_one_top _ hg

theorem integrable_bilin (hpq : p.IsConjExponent q) (Œº : Measure Œ±) {f : Œ± ‚Üí E‚ÇÅ} {g : Œ± ‚Üí E‚ÇÇ}
    (hf : Mem‚Ñíp f p Œº) (hg : Mem‚Ñíp g q Œº) :
    Integrable (fun a ‚Ü¶ L (f a) (g a)) Œº := by
  use L.aestronglyMeasurable_comp‚ÇÇ hf.aestronglyMeasurable hg.aestronglyMeasurable
  apply lintegral_mul_le L hpq Œº hf.aestronglyMeasurable.aemeasurable
    hg.aestronglyMeasurable.aemeasurable |>.trans_lt
  exact ENNReal.mul_lt_top (ENNReal.mul_ne_top coe_ne_top hf.snorm_ne_top) hg.snorm_ne_top

end IsConjExponent
end ENNReal

end

section

namespace MeasureTheory
namespace Lp

variable {Œ± E E‚ÇÅ E‚ÇÇ E‚ÇÉ : Type*} {m : MeasurableSpace Œ±} {p q : ‚Ñù‚â•0‚àû}
  {Œº : Measure Œ±}
  [NormedAddCommGroup E] [NormedSpace ‚Ñù E] [FiniteDimensional ‚Ñù E]
  [NormedAddCommGroup E‚ÇÅ] [NormedSpace ‚Ñù E‚ÇÅ] [FiniteDimensional ‚Ñù E‚ÇÅ]
  [NormedAddCommGroup E‚ÇÇ] [NormedSpace ‚Ñù E‚ÇÇ] [FiniteDimensional ‚Ñù E‚ÇÇ]
  [NormedAddCommGroup E‚ÇÉ] [NormedSpace ‚Ñù  E‚ÇÉ] [FiniteDimensional ‚Ñù  E‚ÇÉ]
  [MeasurableSpace E] [BorelSpace E]
  [MeasurableSpace E‚ÇÅ] [BorelSpace E‚ÇÅ]
  [MeasurableSpace E‚ÇÇ] [BorelSpace E‚ÇÇ]
  [MeasurableSpace E‚ÇÉ] [BorelSpace E‚ÇÉ]
  (L : E‚ÇÅ ‚ÜíL[‚Ñù] E‚ÇÇ ‚ÜíL[‚Ñù] E‚ÇÉ)

variable
  [hpq : Fact (p.IsConjExponent q)] [h'p : Fact (p < ‚àû)]
  [hp : Fact (1 ‚â§ p)] [hq : Fact (1 ‚â§ q)] -- note: these are superfluous, but it's tricky to make them instances.


/- The map sending `g` to `f ‚Ü¶ ‚à´ x, L (g x) (f x) ‚àÇŒº` induces a map on `L^q` into
`Lp E‚ÇÇ p Œº ‚ÜíL[‚Ñù] E‚ÇÉ`. Generally we will take `E‚ÇÉ = ‚Ñù`. -/
variable (p Œº) in
def toDual (g : Lp E‚ÇÅ q Œº) : Lp E‚ÇÇ p Œº ‚ÜíL[‚Ñù] E‚ÇÉ := by{
  let F : Lp E‚ÇÇ p Œº ‚Üí E‚ÇÉ := fun f ‚Ü¶ ‚à´ x, L (g x) (f x) ‚àÇŒº
  have : IsBoundedLinearMap ‚Ñù F := by{
    exact {
      map_add := by{
        intro f‚ÇÅ f‚ÇÇ
        simp[F]
        rw[‚Üê integral_add]
        ¬∑ apply integral_congr_ae
          filter_upwards [coeFn_add f‚ÇÅ f‚ÇÇ] with a ha
          norm_cast
          rw[ha]
          simp
        ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L hpq.out.symm Œº (Lp.mem‚Ñíp g) (Lp.mem‚Ñíp f‚ÇÅ)
        ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L hpq.out.symm Œº (Lp.mem‚Ñíp g) (Lp.mem‚Ñíp f‚ÇÇ)
        }

      map_smul := by{
        intro m f
        simp[F]
        rw[‚Üê integral_smul]
        apply integral_congr_ae
        filter_upwards [coeFn_smul m f] with a ha
        rw[ha]
        simp
        }

      bound := by{
        use (snorm (‚Üë‚Üëg) q Œº).toReal
        constructor
        ¬∑ sorry
        ¬∑ intro f
          simp[F]
          -- Bound norm of integral with integral of norm and apply H√∂lder inequality
          sorry
      }
    }
  }
  apply IsBoundedLinearMap.toContinuousLinearMap this
}


/- The map sending `g` to `f ‚Ü¶ ‚à´ x, L (f x) (g x) ‚àÇŒº` is a linear isometry. -/
variable (p q Œº) in
def toDual‚Çó·µ¢ : Lp E‚ÇÅ q Œº ‚Üí‚Çó·µ¢[‚Ñù] Lp E‚ÇÇ p Œº ‚ÜíL[‚Ñù] E‚ÇÉ where
  toFun := toDual _ _ L
  map_add':= by{
    intro g‚ÇÅ g‚ÇÇ
    simp[toDual, IsBoundedLinearMap.toContinuousLinearMap, IsBoundedLinearMap.toLinearMap]
    ext f
    simp
    rw[‚Üê integral_add]
    ¬∑ apply integral_congr_ae
      filter_upwards [coeFn_add g‚ÇÅ g‚ÇÇ] with a ha
      norm_cast
      rw[ha]
      simp
    ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L hpq.out.symm Œº (Lp.mem‚Ñíp g‚ÇÅ) (Lp.mem‚Ñíp f)
    ¬∑ exact ENNReal.IsConjExponent.integrable_bilin L hpq.out.symm Œº (Lp.mem‚Ñíp g‚ÇÇ) (Lp.mem‚Ñíp f)
  }
  map_smul':= by{
    intro m g
    simp[toDual, IsBoundedLinearMap.toContinuousLinearMap, IsBoundedLinearMap.toLinearMap]
    ext f
    simp
    rw[‚Üê integral_smul]
    apply integral_congr_ae
    filter_upwards [coeFn_smul m g] with a ha
    rw[ha]
    simp
  }
  norm_map' := by {
    sorry
  }

/- The map sending `g` to `f ‚Ü¶ ‚à´ x, L (f x) (g x) ‚àÇŒº` is a linear isometric equivalence.  -/
variable (p q Œº) in
def dualIsometry (L : E‚ÇÅ ‚ÜíL[‚Ñù] Dual ‚Ñù E‚ÇÇ) :
    Dual ‚Ñù (Lp E‚ÇÇ p Œº) ‚âÉ‚Çó·µ¢[‚Ñù] Lp E q Œº :=
  sorry

end Lp
end MeasureTheory

end
